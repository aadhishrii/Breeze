/** @jsxRuntime classic */
/** @jsx jsx */
import { css, jsx } from '@emotion/react';
import React, { Fragment, useEffect, useState } from 'react';
import Head from 'next/head';
import Link from 'next/link'

import Button from '@atlaskit/button';
import { Checkbox } from '@atlaskit/checkbox';
import Form, { CheckboxField, Field, FormFooter, HelperMessage } from '@atlaskit/form';
import Textfield from '@atlaskit/textfield';
import TextArea from '@atlaskit/textarea';
import { RadioGroup } from '@atlaskit/radio';
import { DatePicker, TimePicker } from '@atlaskit/datetime-picker';
import Select from '@atlaskit/select';

import Layout from '../../components/layout';
import { getUserEvents, getProfileData, getUserItineraries } from '../../lib/util';

import { useSession } from 'next-auth/react';

import { ProgressExampleStandard } from '../../components/progressBar';

const formTitleStyles = css({
    font: 'SF Pro',
    fontSize: 24,
    fontWeight: 'medium',
    paddingBottom: '20px',
    paddingTop: '50px',
})

const subtitleStyles = css({
    font: 'SF Pro',
    fontSize: 20,
    paddingBottom: '10px',
    paddingTop: '40px',
})

const formStyle = {
  display: 'flex',
  width: '400px',
  maxWidth: '100%',
  margin: '0 auto',
  flexDirection: 'column'
}

const capacityStyle = css({
  maxWidth: '20%'
})

const formfooterStyles = css({
  display: 'flex', 
  gap: '18px',
  justifyContent: 'center'
})

const venueTypes = [
  { value: 'household', label: 'Household' },
  { value: 'business', label: 'Business' },
  { value: 'public', label: 'Public space' },
];

const timesArray = ['0:00', '0:15', '0:30', '0:45', '1:00', '1:15', '1:30', '1:45', '2:00', 
'2:15', '2:30', '2:45', '3:00', '3:15', '3:30', '3:45', '4:00', '4:15', '4:30', '4:45', 
'5:00', '5:15', '5:30', '5:45', '6:00', '6:15', '6:30', '6:45', '7:00', '7:15', '7:30', 
'7:45', '8:00', '8:15', '8:30', '8:45', '9:00', '9:15', '9:30', '9:45', '10:00', '10:15', 
'10:30', '10:45', '11:00', '11:15', '11:30', '11:45', '12:00', '12:15', '12:30', '12:45', 
'13:00', '13:15', '13:30', '13:45', '14:00', '14:15', '14:30', '14:45', '15:00', '15:15', 
'15:30', '15:45', '16:00', '16:15', '16:30', '16:45', '17:00', '17:15', '17:30', '17:45', 
'18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45', '20:00', '20:15', 
'20:30', '20:45', '21:00', '21:15', '21:30', '21:45', '22:00', '22:15', '22:30', '22:45', 
'23:00', '23:15', '23:30', '23:45'];

const exposureTypes = [
  { value: 'outdoor', label: 'Outdoor' },
  { value: 'indoor', label: 'Indoor' },
  { value: 'both', label: 'Both' },
];

const handleEventSubmission = (data, email) => {

  if (data.backupEvent) {
    data.backupEvent = data.backupEvent.value;
  }

  if (data.itinerary) {
    data.itinerary = data.itinerary.value;
  }

  data.owner = email
  
  fetch("http://127.0.0.1:8000/createEvent", {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  })
  .then(response => response.json())
  .then(responseData => {
    console.log('Success:', responseData);
  })
  .catch((error) => {
    console.error('Error:', error);
  });
};

export default function EventCreation() {
  const { data: session } = useSession()
  const [eventData, setEventData] = useState([]);
  const [itineraryData, setItineraryData] = useState([]);
  useEffect(async () => {
    if (session) {
      const user = await getProfileData(session.user.email);

      const events = await getUserEvents(user.id);
      setEventData(events.map((event) => {
        return {
          label: event.title,
          value: event.id
        };
      }))

      const itineraries = await getUserItineraries(user.id);
      setItineraryData(itineraries.map((itinerary) => {
        return {
          label: itinerary.title,
          value: itinerary.id
        };
      }))
    }
  },[]);

  return (
    <Layout pageTitle="Event Creator" signInRequired>
        <Head>
            <title>Create Itinerary</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
          <div
            style={formStyle}
          >
          <div css={ formTitleStyles }>Event Details</div>
         
            <Form
              onSubmit={async (data) => {
              handleEventSubmission(data, session.user.email);
            }}
            >
            {({ formProps }) => (
                <form {...formProps}>
                    <Field label="Title" name="title" isRequired>
                        {({ fieldProps }) => (
                        <Fragment>
                            <Textfield
                            placeholder="Enter your event title"
                            {...fieldProps}
                            />
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Description" name="description" isRequired>
                        {({ fieldProps }) => (
                        <Fragment>
                            <TextArea
                            placeholder="Enter your event details"
                            {...fieldProps}
                            />
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Address" name="address" isRequired>
                        {({ fieldProps }) => (
                        <Fragment>
                          <Textfield
                            placeholder="e.g UNSW, Kensington, NSW"
                            {...fieldProps}
                            />
                        </Fragment>
                        )}
                    </Field>
                    <Field label="Postcode" name="postcode" isRequired>
                        {({ fieldProps }) => (
                        <Fragment>
                          <Textfield
                            placeholder="e.g 2033"
                            pattern="\d{4}"
                            {...fieldProps}
                            />
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Start date" name="date" isRequired>
                        {({ fieldProps }) => (
                        <Fragment>
                          <DatePicker placeholder='e.g 18/04/2022' {...fieldProps}/>
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Start time" name="time" isRequired>
                        {({ fieldProps }) => (
                        <Fragment>
                           <TimePicker times={timesArray} placeholder='e.g 13:00' {...fieldProps}/>
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Public Event (visible to everyone)" name="isPublic" >
                        {({ fieldProps }) => (
                        <Fragment>
                           <Checkbox {...fieldProps} label="Make Public" />
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Itinerary" name="itinerary">
                        {({ fieldProps }) => (
                        <Fragment>
                          <Select
                            options={itineraryData}
                            {...fieldProps}
                          />
                        </Fragment>
                        )}
                    </Field>  
                    <div css={ subtitleStyles }>Disease tracking (optional)</div>
                    <Field label="Capacity" name="capacity" style={capacityStyle}>
                        {({ fieldProps }) => (
                        <Fragment>
                            <Textfield
                            placeholder="e.g 5"
                            pattern="\d*"
                            {...fieldProps}
                            />
                            <HelperMessage>Must be a number</HelperMessage>
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Venue type" name="venueType">
                        {({ fieldProps }) => (
                        <Fragment>
                            <RadioGroup options={venueTypes} {...fieldProps}/>
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Venue exposure" name="exposure">
                        {({ fieldProps }) => (
                        <Fragment>
                            <RadioGroup options={exposureTypes} {...fieldProps}/>
                        </Fragment>
                        )}
                    </Field>
                    <div style={{paddingBottom: '10px'}}></div>
                    <Field label="Backup event" name="backupEvent">
                        {({ fieldProps }) => (
                        <Fragment>
                          <Select
                            options={eventData}
                            {...fieldProps}
                          />
                        </Fragment>
                        )}
                    </Field>  
                    
                    <FormFooter align='start'>
                      <div css={formfooterStyles}>
                        <Link href="/itinerary/view">
                          <Button type="submit" appearance="subtle">
                            Cancel
                          </Button>
                        </Link>
                        <Button type="submit" appearance="primary">
                          Submit
                        </Button>

                      </div>
                    </FormFooter>
                </form>
            )}
            </Form>
            
          </div>
          
          <div style={{paddingBottom: '70px'}}></div>
      
    </Layout>
  )
}
